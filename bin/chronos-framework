#!/bin/bash
set -o errexit -o nounset -o pipefail
function -h {
cat <<USAGE
 USAGE: chronos-framework (--jar <chronos.jar>)? <option>*

  Run the chronos scheduler, collecting options from the configuration
  directory $conf_dir and configuration file $conf_file,
  and appending the options supplied on the command line.

  If you would like to pass the Jar to be run, do so with --jar. If the Jar is
  not supplied, the script assumes the Jar has been concatenated to it and
  will supply its own path to Java.

USAGE
}; function --help { -h ;}
export LC_ALL=en_US.UTF-8

self="$(cd "$(dirname "$0")" && pwd -P)"/"$(basename "$0")"
chronos_jar="$self"
conf_dir=/etc/chronos/conf
conf_file=/etc/default/chronos

function main {
  if [[ ${1:-} = --jar ]]
  then chronos_jar="$2" ; shift 2
  fi
  load_options_and_log "$@"
}

function element_in {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

function load_options_and_log {
  set -x
  # Load Chronos options from Mesos and Chronos conf files that are present.
  # Launch main program with Syslog enabled.
  local cmd=( run_jar )
  # Load custom options
  if [[ -d $conf_dir ]]
  then
    while read -u 9 -r -d '' path
    do
      local name="${path#./}"
      if ! element_in "--${name#'?'}" "$@"
      then
        case "$name" in
          '?'*) cmd+=( "--${name#'?'}" ) ;;
          *)    cmd+=( "--$name" "$(< "$conf_dir/$name")" ) ;;
        esac
      fi
    done 9< <(cd "$conf_dir" && find . -type f -not -name '.*' -print0)
  fi
  # Read environment variables from config file
  set -o allexport
  [[ ! -f "$conf_file" ]] || . "$conf_file"
  set +o allexport
  for env_op in `env | grep ^CHRONOS_ | sed -e 's/CHRONOS_//' -e 's/=/ /'| awk '{printf("%s%s ", "--", tolower($1)); for(i=2;i<=NF;i++){printf("%s ", $i)}}'| sed -e 's/ $//'`; do
    cmd+=( "$env_op" )
  done
  # Default zk an master options
  if [[ -s /etc/mesos/zk ]]
  then
    cmd+=( --zk_hosts "$(cut -d / -f 3 /etc/mesos/zk)"
           --master "$(cat /etc/mesos/zk)" )
  fi
  logged chronos "${cmd[@]}" "$@"
}

function run_jar {
  local log_format='%2$s%5$s%6$s%n' # Class name, message, exception

  # if running as root and open file limit less than 8192 raise the limit
  [ $EUID -eq 0 -a $(ulimit -n) -lt 8192 ] && ulimit -n 8192

  export PATH=/usr/local/bin:"$PATH"
  local vm_opts=( -Djava.library.path=/usr/local/lib:/usr/lib64:/usr/lib
                  -Djava.util.logging.SimpleFormatter.format="$log_format" )
  for j_opt in ${JAVA_OPTS:-"-Xmx512m"}; do
    vm_opts+=( ${j_opt} )
  done
  # TODO: Set main class in pom.xml and use -jar
  if [ -n "${JAVA_HOME:=}" ]
    then
      JAVA_BIN="$JAVA_HOME/bin/java"
    else
      JAVA_BIN="java"
  fi
  exec $JAVA_BIN "${vm_opts[@]}" -cp "$chronos_jar" org.apache.mesos.chronos.scheduler.Main "$@"
}

function logged {
  local token="$1[$$]" ; shift
  exec 1> >(exec logger -p user.info   -t "$token")
  exec 2> >(exec logger -p user.notice -t "$token")
  "$@"
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then "$@"
else main "$@"
fi
